<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[探索：阻止Unrecognized Selector Crash崩溃的出现]]></title>
      <url>/2017/12/13/AnExperimentOnPreventingUnrecognizedSelectorCrash/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>向对象发送其不能响应的selector时，会触发unrecognized selector sent to instance xxx的异常，没有捕捉到异常时，App最终会崩溃。这篇文章会尝试利用objective-c runtime提供的Dynamic Method Resolution和Message  Forwarding机制阻止Unrecognized Selector Crash崩溃的出现。<a href="https://github.com/xc4ll0c/AnExperimentOnPreventingUnrecognizedSelectorCrash" target="_blank" rel="noopener">Demo地址</a><br><a id="more"></a></p>
<h1 id="Dynamic-Method-Resolution-amp-Message-Forwarding"><a href="#Dynamic-Method-Resolution-amp-Message-Forwarding" class="headerlink" title="Dynamic Method Resolution &amp; Message Forwarding"></a>Dynamic Method Resolution &amp; Message Forwarding</h1><h2 id="Dynamic-Method-Resolution"><a href="#Dynamic-Method-Resolution" class="headerlink" title="Dynamic Method Resolution"></a><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html" target="_blank" rel="noopener">Dynamic Method Resolution</a></h2><p>向objc类的实例发送消息时，objcRuntime使用此消息的selector在此类查询相应方法的IMP(实现)，若类中查询不到则转向父类查询，若任然查询不到selector对应的IMP。则进入Dynamic Method Resolution流程，runtime提供以下两个方法，分别用于动态添加类方法和成员方法。   </p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel;</span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel;</span><br></pre></td></tr></table></figure>
<p>例如TestObject声明了aVoidMethod方法，但是没有提供实现，在运行时可以利用Dynamic Method Resolution动态添加<br>aVoidMethod方法的实现，代码如下：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态的实现</span></span><br><span class="line"><span class="keyword">void</span> _TestObject_dynamic_imp_(<span class="keyword">id</span> <span class="keyword">self</span>, SEL sel) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TestObject</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)aVoidMethod;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestObject</span></span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(aVoidMethod)) &#123;</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, (IMP)_TestObject_dynamic_imp_, <span class="string">"v@:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>objc的类/实例方法实际就是一个C函数，所谓的IMP实际上就是函数指针，这个函数至少接受两个参数一个是self(接收消息的实例/类)，一个是_cmd(selector)。通过<a href="https://developer.apple.com/documentation/objectivec/1418901-class_addmethod?language=objc" target="_blank" rel="noopener">class_addMethod</a>可以动态的为一个类添加selector及其关联的IMP。<strong>“v@:”</strong>字符串描述的是IMP的返回值类型、参数数量及类型。第一个字符表示返回值类型（”v”=void）,第二和第三个为固定参数，分别表示self和_cmd。<strong>“v@:”</strong>表示的含义是返回为void且不接受参数的函数，其他参数类型编码可以参考<a href="https://developer.apple.com/library/etc/redirect/xcode/content/1189/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100" target="_blank" rel="noopener">此文章</a>。 </p>
<p>关于Dynamic Method Resolution和Message Forwarding的触发顺序，runtime的文档：</p>
<blockquote>
<p>Forwarding methods (as described in Message Forwarding) and dynamic method resolution are, largely, orthogonal. A class has the opportunity to dynamically resolve a method before the forwarding mechanism kicks in. If respondsToSelector: or instancesRespondToSelector: is invoked, the dynamic method resolver is given the opportunity to provide an IMP for the selector first. If you implement resolveInstanceMethod: but want particular selectors to actually be forwarded via the forwarding mechanism, you return NO for those selectors.</p>
</blockquote>
<p>指出Dynamic Method Resolution发生在Message Forwarding之前，且respondsToSelector: 或 instancesRespondToSelector: 也会触发Dynamic Method Resolution流程。</p>
<h2 id="Message-Forwarding"><a href="#Message-Forwarding" class="headerlink" title="Message Forwarding"></a><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1" target="_blank" rel="noopener">Message Forwarding</a></h2><p>当Dynamic Method Resolution中没有提供selector的IMP，则会进入到Message Forwarding（消息转发）的流程。runtime先调用<strong><a href="https://developer.apple.com/documentation/objectivec/nsobject?language=objc" target="_blank" rel="noopener">forwardingTargetForSelector:</a></strong>，要求提供消息转发的对象，若返回非nil对象，则消息转发至该对象。若返回nil，则转向到代价更高，构造NSInvocation的流程。runtime调用<strong><a href="https://developer.apple.com/documentation/objectivec/nsobject?language=objc" target="_blank" rel="noopener">methodSignatureForSelector:</a></strong>提供构造NSInvocation所需的返回值类型、参数数量、参数类型等信息，若在此方法返回nil，则会触发unrecognized selector异常，若返回NSMethodSignature，runtime依据此信息构造NSInvocation实例，调用<strong><a href="https://developer.apple.com/documentation/objectivec/nsobject?language=objc" target="_blank" rel="noopener">forwardInvocation:</a></strong>方法，invocation的返回值会返回给消息的发送者。</p>
<p>利用消息转发可以转发unrecognized selector至不同消息实现者，借用它们的IMP，实现类似于多继承的功能，以下为消息转发的demo代码：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">A</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="built_in">NSString</span> *)aMethod;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">B</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="built_in">NSString</span> *)bMethod;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AB</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="built_in">NSString</span> *)aMethod;</span><br><span class="line">- (<span class="built_in">NSString</span> *)bMethod;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">A</span></span></span><br><span class="line">- (<span class="built_in">NSString</span> *)aMethod &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"From Class A"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">B</span></span></span><br><span class="line">- (<span class="built_in">NSString</span> *)bMethod &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"From Class B"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AB</span> ()</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) A *a;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) B *b;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AB</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        _a = [[A alloc] init];</span><br><span class="line">        _b = [[B alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="comment">// aMethod利用forwardingTargetForSelector:转发</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.a respondsToSelector:aSelector]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="comment">// bMethod利用forwardInvocation:转发</span></span><br><span class="line">    <span class="built_in">NSMethodSignature</span> *sig = [<span class="keyword">self</span>.b methodSignatureForSelector:aSelector];</span><br><span class="line">    <span class="keyword">if</span> (!sig) &#123;</span><br><span class="line">        sig = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;</span><br><span class="line">    <span class="comment">// bMethod利用forwardInvocation:转发</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.b respondsToSelector:[anInvocation selector]]) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:<span class="keyword">self</span>.b];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">super</span> forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A和B分别实现了aMethod、bMethod的类，AB声明aMethod和bMethod，且利用消息转发机制转发消息到A和B对象。测试代码如下：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)messageForwardingDemo &#123;</span><br><span class="line">    </span><br><span class="line">    AB *ab = [[AB alloc] init];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"AB responds to aMethod ? %@"</span>, [ab respondsToSelector:<span class="keyword">@selector</span>(aMethod)] ? <span class="string">@"YES"</span> : <span class="string">@"NO"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"AB responds to bMethod ? %@"</span>, [ab respondsToSelector:<span class="keyword">@selector</span>(bMethod)] ? <span class="string">@"YES"</span> : <span class="string">@"NO"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"result of sending aMethod to AB: %@"</span>, [ab aMethod]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"result of sending bMethod to AB: %@"</span>, [ab bMethod]);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"mark end"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建AB类的实例，使用respondsToSelector:测试实例是否响应方法，然后调用方法并输出结果。结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2017-12-14 11:11:56.039216+0800 APP[84699:4307744] AB responds to aMethod ? NO</span><br><span class="line">2017-12-14 11:11:56.039400+0800 APP[84699:4307744] AB responds to bMethod ? NO</span><br><span class="line">2017-12-14 11:11:56.039558+0800 APP[84699:4307744] result of sending aMethod to AB: From Class A</span><br><span class="line">2017-12-14 11:11:56.039706+0800 APP[84699:4307744] result of sending bMethod to AB: From Class B</span><br><span class="line">2017-12-14 11:11:56.039817+0800 APP[84699:4307744] mark end</span><br></pre></td></tr></table></figure>
<p>respondsToSelector:测试均失败，说明实现消息转发流程不会影响respondsToSelector:测试对象是否响应某个方法的结果（respondsToSelector:依赖于selector是否有相关的IMP），实际调用没有任何问题，消息都被成功转发。</p>
<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p>objc对象响应消息的综合流程如下图：<br><img src="/images/AnExperimentOnPreventingUnrecognizedSelectorCrash/selector.png" alt=""></p>
<h1 id="阻止Unrecognized-Selector-Crash"><a href="#阻止Unrecognized-Selector-Crash" class="headerlink" title="阻止Unrecognized Selector Crash"></a>阻止Unrecognized Selector Crash</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>objc的runtime给了我们三次机会提供unrecognized selector的实现或转发给有能力做响应的对象。只要在三个地方中一个做了合适的处理，应该可以避免unrecognized selector崩溃。本文的实现策略是替换NSObject中相关的实现，以便对所有类生效。如果只想对指定类生效，可以改为替换指定类的实现。</p>
<h2 id="疑点"><a href="#疑点" class="headerlink" title="疑点"></a>疑点</h2><p><strong>1、unrecognized selector仅有selector信息，原方法的返回值类型、参数数量和类型均不知道，那么动态提供的IMP返回值和参数如何确定?</strong><br>方法的参数类型和数量由<a href="https://developer.apple.com/library/etc/redirect/xcode/content/1189/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100" target="_blank" rel="noopener">Type Encoding</a>字符串如”V@:”决定，第四个字符开始描述参数类型，那么可以尝试不提供其他参数编码，那么不管selctor对应多少参数，实际调用时都应该不会进行参数解析，避免解析出错。至于返回值可以给个nil试一下。</p>
<p><strong>2、如果避免干扰到其他利用消息转发流程实现的功能？</strong>。<br>2.1. 利用resolveInstanceMethod:的实现：检查当前类有无重写resolveInstanceMethod:，若有重写则不执行保护流程，若没有则开启保护流程。如果该类没有重写resolveInstanceMethod:但是利用了forwardingTargetForSelector:或forwardInvocation:进行转发呢？可以在resolveInstanceMethod:中调用forwardingTargetForSelector:以及<br>methodSignatureForSelector:有无返回值来判定该类有没有自定义转发流程。</p>
<p>2.2. 利用forwardingTargetForSelector:的实现：检查有无重写forwardingTargetForSelector:，若有重写则不执行保护流程，若没有则开启保护流程。调用methodSignatureForSelector:，看其有无返回值来判断有没有自定转发流程。</p>
<p>2.3. 利用forwardInvocation:的实现：只需检查当前类有无重写methodSignatureForSelector:即可。</p>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>测试类定义如下：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> SimpleStruct &#123;</span><br><span class="line">    <span class="built_in">NSInteger</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> SimpleStruct SimpleStruct;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - TestObject</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TestObject</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)voidMethod;</span><br><span class="line">- (<span class="keyword">id</span>)methodReturnsAnObject;</span><br><span class="line">- (<span class="built_in">NSInteger</span>)methodReturnsABasicValue;</span><br><span class="line">- (SimpleStruct)methodReturnsAStruct;</span><br><span class="line">- (<span class="keyword">id</span>)methodReturnsAnObjectWithP1:(<span class="keyword">id</span>)p1 rect:(<span class="built_in">CGRect</span>)rect;</span><br><span class="line">- (<span class="built_in">CGRect</span>)methodReturnsACGRect;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>TestObject类声明六个方法，但均为提供实现。若方案有效，则向TestObject实例发送这六个消息均不会发生崩溃，也可以获取到返回值。具体测试代码如下:</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试无参数无返回值的情况</span></span><br><span class="line">- (<span class="keyword">void</span>)testThatItCanProtectVoidMethod &#123;</span><br><span class="line">    TestObject *tObject = [[TestObject alloc] init];</span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        [tObject voidMethod];</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="comment">// 不能抛出异常</span></span><br><span class="line">        <span class="built_in">XCTAssertTrue</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试无参数但返回值一个对象的情况</span></span><br><span class="line">- (<span class="keyword">void</span>)testThatItCanProtectMethodReturnsAnObject &#123;</span><br><span class="line">    TestObject *tObject = [[TestObject alloc] init];</span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        <span class="keyword">id</span> object = [tObject methodReturnsAnObject];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, object);</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="comment">// 不能抛出异常</span></span><br><span class="line">        <span class="built_in">XCTAssertTrue</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试无参数但返回值一个基本数据类型的情况</span></span><br><span class="line">- (<span class="keyword">void</span>)testThatItCanMethodReturnsABasicValue &#123;</span><br><span class="line">    TestObject *tObject = [[TestObject alloc] init];</span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        <span class="built_in">NSInteger</span> i = [tObject methodReturnsABasicValue];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, @(i));</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="comment">// 不能抛出异常</span></span><br><span class="line">        <span class="built_in">XCTAssertTrue</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试无参数但返回值一个含单个值的结构体的情况</span></span><br><span class="line">- (<span class="keyword">void</span>)testThatItCanProtectMethodReturnsAStruct &#123;</span><br><span class="line">    TestObject *tObject = [[TestObject alloc] init];</span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        SimpleStruct aStruct = [tObject methodReturnsAStruct];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, @(aStruct.i));</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="comment">// 不能抛出异常</span></span><br><span class="line">        <span class="built_in">XCTAssertTrue</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试有参数有返回值的情况</span></span><br><span class="line">- (<span class="keyword">void</span>)testThatItCanProtectMethodReturnsAnObjectWithP1 &#123;</span><br><span class="line">    TestObject *tObject = [[TestObject alloc] init];</span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        <span class="keyword">id</span> object = [tObject methodReturnsAnObjectWithP1:[[<span class="built_in">NSObject</span> alloc] init]</span><br><span class="line">                                                    rect:<span class="built_in">CGRectMake</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">200</span>)];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, object);</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="comment">// 不能抛出异常</span></span><br><span class="line">        <span class="built_in">XCTAssertTrue</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试无参数但返回CGRect的情况</span></span><br><span class="line">- (<span class="keyword">void</span>)testThatItCanProtectMethodReturnsACGRect &#123;    </span><br><span class="line">    TestObject *tObject = [[TestObject alloc] init];</span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        <span class="built_in">CGRect</span> aStruct = [tObject methodReturnsACGRect];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, @(aStruct.origin.x));</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="comment">// 不能抛出异常</span></span><br><span class="line">        <span class="built_in">XCTAssertTrue</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用unrecognized selector会抛出异常的特点来判定测试是否成功。</p>
<h2 id="实现1-利用resolveInstanceMethod：动态提供方法的IMP"><a href="#实现1-利用resolveInstanceMethod：动态提供方法的IMP" class="headerlink" title="实现1:利用resolveInstanceMethod：动态提供方法的IMP"></a>实现1:利用resolveInstanceMethod：动态提供方法的IMP</h2><h3 id="实现代码如下："><a href="#实现代码如下：" class="headerlink" title="实现代码如下："></a>实现代码如下：</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> _trim_unrecognized_default_imp_(<span class="keyword">id</span> <span class="keyword">self</span>, SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - TypeResolveInstanceMethod</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">TypeResolveInstanceMethod</span>)</span></span><br><span class="line">+ (<span class="keyword">void</span>)TRIM_startUnrecognizedSelectorProtection &#123;</span><br><span class="line">    [<span class="keyword">self</span> TRIM_exchangeResolveInstanceMethodMethod];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TRIM_stopUnrecognizedSelectorProtection &#123;</span><br><span class="line">    [<span class="keyword">self</span> TRIM_exchangeResolveInstanceMethodMethod];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TRIM_exchangeResolveInstanceMethodMethod &#123;</span><br><span class="line">    [[<span class="keyword">self</span> <span class="keyword">class</span>] ra_swizzleClassMethodWithOriginalSEL:<span class="keyword">@selector</span>(resolveInstanceMethod:) swizzledSEL:<span class="keyword">@selector</span>(TRIM_resolveInstanceMethod:)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)TRIM_resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// methodSignatureForSelector: 在找不到方法现实时会调用resolveInstanceMethod：获取方法实现</span></span><br><span class="line">    <span class="comment">// 所以在resolveInstanceMethod：直接调用methodSignatureForSelector：会造成死循环调用</span></span><br><span class="line">    <span class="comment">// 是否进入了循环调用，返回NO，破除循环调用</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> TRIM_isInRecusiveCallForSelector:sel]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先判断类是否已经实现了resolveInstanceMethod转发流程</span></span><br><span class="line">    <span class="built_in">BOOL</span> isResolved = [<span class="keyword">self</span> TRIM_resolveInstanceMethod:sel];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若子类已经重写，避免干扰子类的流程，直接返回NSObject的实现</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="keyword">self</span> <span class="keyword">class</span>] ra_isMethodOveridedNSObjectImplementationForSelector:<span class="keyword">@selector</span>(resolveInstanceMethod:) isClassMethod:<span class="literal">YES</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> isResolved;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断类是否通过forwardingTargetForSelector:实现了转发流程</span></span><br><span class="line">    <span class="keyword">if</span> (!isResolved) &#123;</span><br><span class="line">        <span class="keyword">id</span> forwardingTarget = [<span class="keyword">self</span> forwardingTargetForSelector:sel];</span><br><span class="line">        isResolved = forwardingTarget != <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断类是否通过forwardInvocation:实现了转发流程</span></span><br><span class="line">    <span class="keyword">if</span> (!isResolved) &#123;</span><br><span class="line">        [<span class="keyword">self</span> TRIM_markRecusiveCallStartForSelector:sel];</span><br><span class="line">        <span class="built_in">NSMethodSignature</span> *sig = [<span class="keyword">self</span> methodSignatureForSelector:sel];</span><br><span class="line">        [<span class="keyword">self</span> TRIM_unmarkRecusiveCallStartForSelector:sel];</span><br><span class="line">        isResolved = sig != <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 此类未实现任何转发流程，则开启防护措施</span></span><br><span class="line">    <span class="keyword">if</span> (!isResolved) &#123;</span><br><span class="line">        <span class="comment">// 动态添加一个实现</span></span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, (IMP)_trim_unrecognized_default_imp_, <span class="string">"@@:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isResolved;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSCache</span> *)TRIM_SharedCache &#123;</span><br><span class="line">    <span class="keyword">static</span> __<span class="keyword">strong</span> <span class="built_in">NSCache</span> *aCache = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        aCache = [[<span class="built_in">NSCache</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> aCache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - 信息标记</span></span><br><span class="line">+ (CPThreadSafeCounter *)TRIM_ClassSharedcounter &#123;</span><br><span class="line">    <span class="built_in">NSCache</span> *aCache = [<span class="keyword">self</span> TRIM_SharedCache];</span><br><span class="line">    <span class="built_in">NSString</span> *key = <span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>);</span><br><span class="line">    CPThreadSafeCounter *counter = [aCache objectForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (!counter) &#123;</span><br><span class="line">        counter = [[CPThreadSafeCounter alloc] init];</span><br><span class="line">        [aCache setObject:counter forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)TRIM_isInRecusiveCallForSelector:(SEL)aSelector &#123;</span><br><span class="line">    CPThreadSafeCounter *counter = [<span class="keyword">self</span> TRIM_ClassSharedcounter];</span><br><span class="line">    <span class="keyword">return</span> ![counter isZeroCountForObject:<span class="built_in">NSStringFromSelector</span>(aSelector)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TRIM_markRecusiveCallStartForSelector:(SEL)aSelector &#123;</span><br><span class="line">    CPThreadSafeCounter *counter = [<span class="keyword">self</span> TRIM_ClassSharedcounter];</span><br><span class="line">    [counter addCountForObject:<span class="built_in">NSStringFromSelector</span>(aSelector)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TRIM_unmarkRecusiveCallStartForSelector:(SEL)aSelector &#123;</span><br><span class="line">    CPThreadSafeCounter *counter = [<span class="keyword">self</span> TRIM_ClassSharedcounter];</span><br><span class="line">    [counter decreaseCountForObject:<span class="built_in">NSStringFromSelector</span>(aSelector)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际实现的代码比预想中的要长，因为要避免一些坑。</p>
<h3 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h3><p>调用methodSignatureForSelector:时，若selector下没有相关的sig，会触发resolveInstanceMethod:所以会出现死循环调用，为了打破循环，在调用resolveInstanceMethod:中调用methodSignatureForSelector:之前，通过TRIM_markRecusiveCallStartForSelector:为此selector打下标记，表明即将进入循环调用，在进入resolveInstanceMethod:方法是，检查selector有打上进入循环的标记，若已经进入，则直接返回NO。</p>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/images/AnExperimentOnPreventingUnrecognizedSelectorCrash/testResult1.png" alt=""><br>失败的理由为BAD_ACCESS，失败的测试用例如下：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试无参数但返回CGRect的情况</span></span><br><span class="line">- (<span class="keyword">void</span>)testThatItCanProtectMethodReturnsACGRect &#123;    </span><br><span class="line">    TestObject *tObject = [[TestObject alloc] init];</span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        <span class="built_in">CGRect</span> aStruct = [tObject methodReturnsACGRect];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, @(aStruct.origin.x));</span><br><span class="line">    &#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        <span class="comment">// 不能抛出异常</span></span><br><span class="line">        <span class="built_in">XCTAssertTrue</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="为什么会出现BAD-ACCESS？"><a href="#为什么会出现BAD-ACCESS？" class="headerlink" title="为什么会出现BAD_ACCESS？"></a>为什么会出现BAD_ACCESS？</h3><p>查看函数的调用过程，实现1的确给methodReturnsACGRect selector提供了默认实现，但是在调用这个实现时就出现了内存访问错误。<a href="https://github.com/RetVal/objc-runtime" target="_blank" rel="noopener">这个仓库下有objc runtime的可编译源码</a>，拿来一探究竟吧。结果如下图:<br><img src="/images/AnExperimentOnPreventingUnrecognizedSelectorCrash/ep1.png" alt=""><br><img src="/images/AnExperimentOnPreventingUnrecognizedSelectorCrash/ep2.png" alt=""><br>在进入默认实现_trim_unrecognized_default_imp_之前，对某个对象进行retain(ARC下编译器自动补充的内存管理代码)操作时，发生了访问异常。看看obj的情况：<br><img src="/images/AnExperimentOnPreventingUnrecognizedSelectorCrash/ep3.png" alt=""><br>无法访问，那<strong>objc_storeStrong</strong>又做了些什么：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">objc_storeStrong(<span class="keyword">id</span> *location, <span class="keyword">id</span> obj)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">id</span> prev = *location;</span><br><span class="line">    <span class="keyword">if</span> (obj == prev) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    objc_retain(obj);</span><br><span class="line">    *location = obj;</span><br><span class="line">    objc_release(prev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看代码应该是将obj赋值到一个变量上，结合上面的调用流程，这个变量会作为参数传给_trim_unrecognized_default_imp_，也就是self/sel出了问题。emmmm……..为什么这两个参数会出问题呢？依稀记得clang有个参数可以将objc的代码完整转码为c++实现，用于窥探objc/及编译器的秘密。命令如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc inputFile -o outputfile</span><br></pre></td></tr></table></figure>
<p>处理后拿到的关键代码如下：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="keyword">void</span> * __cdecl memset(<span class="keyword">void</span> *_Dst, <span class="keyword">int</span> _Val, size_t _Size);</span><br><span class="line">namespace &#123;</span><br><span class="line"><span class="keyword">struct</span> __Stret0 &#123;</span><br><span class="line">	__Stret0(<span class="keyword">id</span> receiver, SEL sel) &#123;</span><br><span class="line">	  <span class="keyword">unsigned</span> size = <span class="keyword">sizeof</span>(<span class="built_in">CGRect</span>);</span><br><span class="line">	  <span class="keyword">if</span> (size == <span class="number">1</span> || size == <span class="number">2</span> || size == <span class="number">4</span> || size == <span class="number">8</span>)</span><br><span class="line">	    s = ((<span class="built_in">CGRect</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend)(receiver, sel);</span><br><span class="line">	  <span class="keyword">else</span> <span class="keyword">if</span> (receiver == <span class="number">0</span>)</span><br><span class="line">	    memset((<span class="keyword">void</span>*)&amp;s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">	  <span class="keyword">else</span></span><br><span class="line">	    s = ((<span class="built_in">CGRect</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend_stret)(receiver, sel);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">CGRect</span> s;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="comment">/* @autoreleasepool */</span> &#123; __AtAutoreleasePool __autoreleasepool; </span><br><span class="line"></span><br><span class="line">        TestObject *testObject = ((TestObject *(*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend)((<span class="keyword">id</span>)((TestObject *(*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *)objc_msgSend)((<span class="keyword">id</span>)objc_getClass(<span class="string">"TestObject"</span>), sel_registerName(<span class="string">"alloc"</span>)), sel_registerName(<span class="string">"init"</span>));</span><br><span class="line">        __Stret0((<span class="keyword">id</span>)testObject, sel_registerName(<span class="string">"methodReturnsACGRect"</span>)).s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们知道objc的消息最终都会转为调用objc_msgSend函数，TestObject的alloc和init就是如此，但是调用methodReturnsACGRect方法时却发生了变化，编译器自动生成了__Stret0代码，内部更具CGRect的size决定调用objc_msgSend还是objc_msgSend_stret。<a href="https://developer.apple.com/documentation/objectivec/1456730-objc_msgsend_stret?language=objc#" target="_blank" rel="noopener">objc_msgSend_stret的文档</a>如下:</p>
<blockquote>
<p>Sends a message with a data-structure return value to an instance of a class.</p>
</blockquote>
<p>当返回值为struct时，会转为调用objc_msgsend_stret做消息发送，那么objc_msgSend和objc_msgSend_stret在实现上有什么区别呢？根据文章<a href="http://www.sealiesoftware.com/blog/archive/2008/10/30/objc_explain_objc_msgSend_stret.html" target="_blank" rel="noopener">objc explain: objc_msgSend_stret</a>中的解释，在常规的函数调用中参数和返回值都可以保存在寄存器中，例如方法- (int)method:(id)arg;寄存器分配如下：</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">int</span>) method:(<span class="keyword">id</span>)arg;</span><br><span class="line">        r3 = <span class="keyword">self</span></span><br><span class="line">        r4 = _cmd, <span class="keyword">@selector</span>(method:)</span><br><span class="line">        r5 = arg</span><br><span class="line">	(on exit) r3 = returned <span class="keyword">int</span></span><br></pre></td></tr></table></figure>
<p>参数和返回值都可以保存在寄存器中，但是面对过大的struct返回值时，函数调用者得先申请栈空间，且将这个栈地址传入函数，作为struct返回值的写入地址。</p>
<figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-(<span class="keyword">struct</span> st) method:(<span class="keyword">id</span>)arg;</span><br><span class="line">        r3 = &amp;struct_var (in caller's stack frame)</span><br><span class="line">        r4 = <span class="keyword">self</span></span><br><span class="line">        r5 = _cmd, <span class="keyword">@selector</span>(method:)</span><br><span class="line">        r6 = arg</span><br><span class="line">        (on exit) <span class="keyword">return</span> value written into struct_var</span><br></pre></td></tr></table></figure>
<p>栈地址作为第一个参数，其他参数向后挪。oh！似乎找到了问题所在。文章<a href="http://www.clarkcox.com/blog/2009/02/04/inspecting-obj-c-parameters-in-gdb/" target="_blank" rel="noopener">Inspecting Obj-C parameters in gdb</a>描述了x86_64下，寄存器和参数的关系如下：</p>
<blockquote>
<p>$rdi ➡ arg0 (通常为self，stret下为struct返回值写入地址)<br>$rsi ➡ arg1 (通常为_cmd，stret下为self).<br>$rdx ➡ arg2 (stret下为_cmd).<br>$rcx ➡ arg3.<br>$r8 ➡ arg4.<br>$r9 ➡ arg5.  </p>
</blockquote>
<p>_trim_unrecognized_default_imp_转为汇编代码(x86_64 AT&amp;T风格)后，如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">__trim_unrecognized_default_imp_:       ## @_trim_unrecognized_default_imp_</span><br><span class="line">Lfunc_begin0:</span><br><span class="line">	.loc	1 15 0                  </span><br><span class="line">	.cfi_startproc</span><br><span class="line">## BB#0:</span><br><span class="line">	pushq	%rbp</span><br><span class="line">Lcfi0:</span><br><span class="line">	.cfi_def_cfa_offset 16</span><br><span class="line">Lcfi1:</span><br><span class="line">	.cfi_offset %rbp, -16</span><br><span class="line">	movq	%rsp, %rbp</span><br><span class="line">Lcfi2:</span><br><span class="line">	.cfi_def_cfa_register %rbp</span><br><span class="line">	subq	$32, %rsp</span><br><span class="line">	leaq	-8(%rbp), %rax</span><br><span class="line">	movq	$0, -8(%rbp)</span><br><span class="line">	movq	%rdi, -24(%rbp)   // 将第一个参数，应该为id self，存到临时变量</span><br><span class="line">	movq	%rax, %rdi</span><br><span class="line">	movq	-24(%rbp), %rax   // 将临时变量中的id self，存到寄存器rax</span><br><span class="line">	movq	%rsi, -32(%rbp)        </span><br><span class="line">	movq	%rax, %rsi       // 将rax的值也即是id self，作为_objc_storeStrong第二个参数</span><br><span class="line">	callq	_objc_storeStrong</span><br><span class="line">	leaq	-8(%rbp), %rdi</span><br><span class="line">	xorl	%ecx, %ecx</span><br><span class="line">	movl	%ecx, %esi</span><br><span class="line">	##DEBUG_VALUE: _trim_unrecognized_default_imp_:self &lt;- [%RDI+0]</span><br><span class="line">	movq	-32(%rbp), %rax         ## 8-byte Reload</span><br><span class="line">	movq	%rax, -16(%rbp)</span><br><span class="line">Ltmp0:</span><br><span class="line">	.loc	1 17 1 prologue_end     </span><br><span class="line">	callq	_objc_storeStrong</span><br><span class="line">Ltmp1:</span><br><span class="line">	.loc	1 0 1 is_stmt 0         </span><br><span class="line">	xorl	%ecx, %ecx</span><br><span class="line">	movl	%ecx, %eax</span><br><span class="line">	.loc	1 17 1                  </span><br><span class="line">	addq	$32, %rsp</span><br><span class="line">	popq	%rbp</span><br><span class="line">	retq</span><br><span class="line">Ltmp2:</span><br><span class="line">Lfunc_end0:</span><br></pre></td></tr></table></figure>
<p>objc_storeStrong的第二个参数为需要retain的对象，所以关注寄存器rsi的赋值情况，rsi被赋予上一个函数在rdi(第一个参数)下留下的值，看看从objc_msgSend_stret的汇编代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">libobjc.A.dylib`_objc_msgSend_stret_uncached:   // rdi = stretAddres, rsi = arg1(self), rdx = args2(_cmd)</span><br><span class="line">-&gt;  0x100319550 &lt;+0&gt;:   pushq  %rbp</span><br><span class="line">    0x100319551 &lt;+1&gt;:   movq   %rsp, %rbp</span><br><span class="line">    0x100319554 &lt;+4&gt;:   subq   $0x88, %rsp</span><br><span class="line">    0x10031955b &lt;+11&gt;:  movdqa %xmm0, -0x80(%rbp)</span><br><span class="line">    0x100319560 &lt;+16&gt;:  pushq  %rax</span><br><span class="line">    0x100319561 &lt;+17&gt;:  movdqa %xmm1, -0x70(%rbp)</span><br><span class="line">    0x100319566 &lt;+22&gt;:  pushq  %rdi               </span><br><span class="line">    0x100319567 &lt;+23&gt;:  movdqa %xmm2, -0x60(%rbp) </span><br><span class="line">    0x10031956c &lt;+28&gt;:  pushq  %rsi              </span><br><span class="line">    0x10031956d &lt;+29&gt;:  movdqa %xmm3, -0x50(%rbp)</span><br><span class="line">    0x100319572 &lt;+34&gt;:  pushq  %rdx               </span><br><span class="line">    0x100319573 &lt;+35&gt;:  movdqa %xmm4, -0x40(%rbp)</span><br><span class="line">    0x100319578 &lt;+40&gt;:  pushq  %rcx               </span><br><span class="line">    0x100319579 &lt;+41&gt;:  movdqa %xmm5, -0x30(%rbp)</span><br><span class="line">    0x10031957e &lt;+46&gt;:  pushq  %r8                </span><br><span class="line">    0x100319580 &lt;+48&gt;:  movdqa %xmm6, -0x20(%rbp)</span><br><span class="line">    0x100319585 &lt;+53&gt;:  pushq  %r9                </span><br><span class="line">    0x100319587 &lt;+55&gt;:  movdqa %xmm7, -0x10(%rbp)</span><br><span class="line">    0x10031958c &lt;+60&gt;:  movq   %rsi, %rdi               </span><br><span class="line">    0x10031958f &lt;+63&gt;:  movq   %rdx, %rsi                 </span><br><span class="line">    0x100319592 &lt;+66&gt;:  movq   %r10, %rdx                 // 调用_class_lookupMethodAndLoadCache3函数有对寄存器的值做调整，以避免其读出错误参数</span><br><span class="line">    0x100319595 &lt;+69&gt;:  callq  0x100319990               ; ::_class_lookupMethodAndLoadCache3(id, SEL, Class) at objc-runtime-new.mm:4572</span><br><span class="line">    0x10031959a &lt;+74&gt;:  movq   %rax, %r11                // r11保存了_class_lookupMethodAndLoadCache3查询来的IMP(_trim_unrecognized_default_imp_)</span><br><span class="line">    0x10031959d &lt;+77&gt;:  movdqa -0x80(%rbp), %xmm0        // 恢复调用_class_lookupMethodAndLoadCache3函数前的寄存器值</span><br><span class="line">    0x1003195a2 &lt;+82&gt;:  popq   %r9</span><br><span class="line">    0x1003195a4 &lt;+84&gt;:  movdqa -0x70(%rbp), %xmm1</span><br><span class="line">    0x1003195a9 &lt;+89&gt;:  popq   %r8</span><br><span class="line">    0x1003195ab &lt;+91&gt;:  movdqa -0x60(%rbp), %xmm2</span><br><span class="line">    0x1003195b0 &lt;+96&gt;:  popq   %rcx</span><br><span class="line">    0x1003195b1 &lt;+97&gt;:  movdqa -0x50(%rbp), %xmm3</span><br><span class="line">    0x1003195b6 &lt;+102&gt;: popq   %rdx</span><br><span class="line">    0x1003195b7 &lt;+103&gt;: movdqa -0x40(%rbp), %xmm4</span><br><span class="line">    0x1003195bc &lt;+108&gt;: popq   %rsi</span><br><span class="line">    0x1003195bd &lt;+109&gt;: movdqa -0x30(%rbp), %xmm5</span><br><span class="line">    0x1003195c2 &lt;+114&gt;: popq   %rdi</span><br><span class="line">    0x1003195c3 &lt;+115&gt;: movdqa -0x20(%rbp), %xmm6</span><br><span class="line">    0x1003195c8 &lt;+120&gt;: popq   %rax</span><br><span class="line">    0x1003195c9 &lt;+121&gt;: movdqa -0x10(%rbp), %xmm7</span><br><span class="line">    0x1003195ce &lt;+126&gt;: testq  %r11, %r11                   </span><br><span class="line">    0x1003195d1 &lt;+129&gt;: leave  </span><br><span class="line">    0x1003195d2 &lt;+130&gt;: jmpq   *%r11.              // 未做调整，直接调用了IMP（_trim_unrecognized_default_imp_）</span><br><span class="line">    0x1003195d5 &lt;+133&gt;: nopl   (%rax)</span><br></pre></td></tr></table></figure>
<p>从_class_lookupMethodAndLoadCache3查询出IMP后，就直接假设IMP会处理struct返回值，实际上我们提供的默认实现，并不支持，将structReturnAddr当作了self来解读，然后出现了BAD_ACCESS！</p>
<h3 id="如何避免返回值为struct下的BAD-ACCESS呢？"><a href="#如何避免返回值为struct下的BAD-ACCESS呢？" class="headerlink" title="如何避免返回值为struct下的BAD_ACCESS呢？"></a>如何避免返回值为struct下的BAD_ACCESS呢？</h3><p>编译器根据接口推断出了该使用objc_msgsend还是objc_msgsend_stret，使用[testObject performSelector:@selector(methodReturnsACGRect)]进行调用，可以成功预防。performSelector的返回值为id，走的还是objc_msgsend，@selector(methodReturnsACGRect)的调用完全依赖于其MethodSignature中对参数和返回值的描述，也走objc_msgsend，因此不会出现问题。但是直接调用的情况下该如何处理，暂无思路，先放下对此种情况下的保护。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>利用resolveInstanceMethod:动态提供IMP实现的方案优缺点如下：<br><strong>优点</strong>：暂无<br><strong>缺点</strong>：<br>1、respondsToSelector:测试对象是否响应selector时，也会触发resolveInstanceMethod:添加方法，对正常使用干扰很大，例如使用代理delegate的情况，经常会先respondsToSelector:测试一下代理，看其有无实现相关方法。delegate会被误加上错误的实现，出现不可预料的错误！<br>2、不能保护声明了返回值为CGRect但是没有提供的方法。</p>
<h2 id="实现2-利用forwardingTargetForSelector-提供转发对象"><a href="#实现2-利用forwardingTargetForSelector-提供转发对象" class="headerlink" title="实现2:利用forwardingTargetForSelector:提供转发对象"></a>实现2:利用forwardingTargetForSelector:提供转发对象</h2><h3 id="实现代码如下：-1"><a href="#实现代码如下：-1" class="headerlink" title="实现代码如下："></a>实现代码如下：</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> _tft_unrecognized_default_imp_(<span class="keyword">id</span> <span class="keyword">self</span>, SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - _TFT_ForwradingTargetClass</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_TFT_ForwradingTargetClass</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_TFT_ForwradingTargetClass</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">TypeForwardingTarget</span>)</span></span><br><span class="line">+ (<span class="keyword">void</span>)TFT_startUnrecognizedSelectorProtection &#123;</span><br><span class="line">    [<span class="keyword">self</span> TFT_exchangeForwardingTargetForSelectorMethod];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TFT_stopUnrecognizedSelectorProtection &#123;</span><br><span class="line">    [<span class="keyword">self</span> TFT_exchangeForwardingTargetForSelectorMethod];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TFT_exchangeForwardingTargetForSelectorMethod &#123;</span><br><span class="line">    [[<span class="keyword">self</span> <span class="keyword">class</span>] ra_swizzleInstanceMethodWithOriginalSEL:<span class="keyword">@selector</span>(forwardingTargetForSelector:)</span><br><span class="line">                                              swizzledSEL:<span class="keyword">@selector</span>(TFT_forwardingTargetForSelector:)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)TFT_forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查此类是否通过forwardingTargetForSelector:实现消息转发</span></span><br><span class="line">    <span class="keyword">id</span> forwardingTarget = [<span class="keyword">self</span> TFT_forwardingTargetForSelector:aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若子类已经重写，避免干扰子类的流程，直接返回NSObject的实现</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="keyword">self</span> <span class="keyword">class</span>] ra_isMethodOveridedNSObjectImplementationForSelector:<span class="keyword">@selector</span>(forwardingTargetForSelector:) isClassMethod:<span class="literal">NO</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> forwardingTarget;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查此类是否通过forwardingTargetForSelector:实现了转发流程</span></span><br><span class="line">    <span class="keyword">if</span> (!forwardingTarget) &#123;</span><br><span class="line">        <span class="built_in">NSMethodSignature</span> *sig = [<span class="keyword">self</span> methodSignatureForSelector:aSelector];</span><br><span class="line">        <span class="keyword">if</span> (sig != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> forwardingTarget;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取一个转发代理实例</span></span><br><span class="line">    <span class="keyword">if</span> (!forwardingTarget) &#123;</span><br><span class="line">        forwardingTarget = [<span class="keyword">self</span> TFT_instanceOfForwardingTargetClassWithSelector:aSelector];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> forwardingTarget;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)TFT_instanceOfForwardingTargetClassWithSelector:(SEL)aSelector &#123;</span><br><span class="line">    Class forwardingTargetClass = [_TFT_ForwradingTargetClass <span class="keyword">class</span>];</span><br><span class="line">    class_addMethod(forwardingTargetClass, aSelector, (IMP)_tft_unrecognized_default_imp_, <span class="string">"@@:"</span>);</span><br><span class="line">    <span class="keyword">id</span> instance = [[forwardingTargetClass alloc] init];</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>若子类重写了forwardingTargetForSelector:就不启用保护了。若子类通过methodSignatureForSelector:实现转发流程，也不对这些selector做保护。其他情况下，给stub类forwardingTargetClass添加未能识别的selector的实现，使其可以响应此selector的消息，然后创建forwardingTargetClass实例，作为消息转发对象。</p>
<h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/images/AnExperimentOnPreventingUnrecognizedSelectorCrash/testResult2.png" alt=""><br>返回值为CGRect时同样会出现BAD_ACCESS，原因和实现1中描述的是一样的。</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>利用forwardingTargetForSelector:动态提供IMP实现的方案优缺点如下：<br><strong>优点</strong>：<br>1、respondsToSelector:不会触发消息转发流程，不干扰respondsToSelector:测试结果。<br><strong>缺点</strong>：<br>1、不能保护声明了返回值为CGRect但是没有提供的方法。</p>
<h2 id="实现3-利用forwardInvocation-转发消息"><a href="#实现3-利用forwardInvocation-转发消息" class="headerlink" title="实现3:利用forwardInvocation:转发消息"></a>实现3:利用forwardInvocation:转发消息</h2><h3 id="实现代码如下"><a href="#实现代码如下" class="headerlink" title="实现代码如下:"></a>实现代码如下:</h3><figure class="highlight mm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> _tfi_unrecognized_default_imp_(<span class="keyword">id</span> <span class="keyword">self</span>, SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - _TFI_ForwradingClass</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_TFI_ForwradingClass</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="keyword">id</span>)dummyMethod;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_TFI_ForwradingClass</span></span></span><br><span class="line">- (<span class="keyword">id</span>)dummyMethod &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - TypeForwardInvocation</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">TypeForwardInvocation</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TFI_startUnrecognizedSelectorProtection &#123;</span><br><span class="line">    [<span class="keyword">self</span> TFI_exchangeMethodSignatureForSelectorMethod];</span><br><span class="line">    [<span class="keyword">self</span> TFI_exchangeForwardInvocationMethod];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TFI_stopUnrecognizedSelectorProtection &#123;</span><br><span class="line">    [<span class="keyword">self</span> TFI_exchangeMethodSignatureForSelectorMethod];</span><br><span class="line">    [<span class="keyword">self</span> TFI_exchangeForwardInvocationMethod];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TFI_exchangeMethodSignatureForSelectorMethod &#123;</span><br><span class="line">    [[<span class="keyword">self</span> <span class="keyword">class</span>] ra_swizzleInstanceMethodWithOriginalSEL:<span class="keyword">@selector</span>(methodSignatureForSelector:)</span><br><span class="line">                                              swizzledSEL:<span class="keyword">@selector</span>(TFI_methodSignatureForSelector:)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)TFI_exchangeForwardInvocationMethod &#123;</span><br><span class="line">    [[<span class="keyword">self</span> <span class="keyword">class</span>] ra_swizzleInstanceMethodWithOriginalSEL:<span class="keyword">@selector</span>(forwardInvocation:)</span><br><span class="line">                                              swizzledSEL:<span class="keyword">@selector</span>(TFI_forwardInvocation:)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)TFI_methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="built_in">NSMethodSignature</span> *sig = [<span class="keyword">self</span> TFI_methodSignatureForSelector:aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 若子类已经重写，避免干扰子类的流程，直接返回NSObject的实现</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="keyword">self</span> <span class="keyword">class</span>] ra_isMethodOveridedNSObjectImplementationForSelector:<span class="keyword">@selector</span>(methodSignatureForSelector:) isClassMethod:<span class="literal">NO</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> sig;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!sig) &#123;</span><br><span class="line">        <span class="comment">// 标记原来的类未针对aSelector实现转发，返回一个默认的sig</span></span><br><span class="line">        CPThreadSafeCounter *counter = [<span class="keyword">self</span> TFI_unrecognizedSelectorCacheSet];</span><br><span class="line">        <span class="keyword">if</span> (!counter) &#123;</span><br><span class="line">            counter = [[CPThreadSafeCounter alloc] init];</span><br><span class="line">            [<span class="keyword">self</span> TFI_setUnrecognizedSelectorCacheSet:counter];</span><br><span class="line">        &#125;</span><br><span class="line">        [counter addCountForObject:<span class="built_in">NSStringFromSelector</span>(aSelector)];</span><br><span class="line">        </span><br><span class="line">        sig = [_TFI_ForwradingClass instanceMethodSignatureForSelector:<span class="keyword">@selector</span>(dummyMethod)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)TFI_forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;</span><br><span class="line">    SEL aSelector = [anInvocation selector];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断原来的类中是否实现了转发</span></span><br><span class="line">    CPThreadSafeCounter *counter = [<span class="keyword">self</span> TFI_unrecognizedSelectorCacheSet];</span><br><span class="line">    <span class="keyword">if</span> ([counter isZeroCountForObject:<span class="built_in">NSStringFromSelector</span>(aSelector)]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> TFI_forwardInvocation:anInvocation];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 添加个空方法，然后发起调用</span></span><br><span class="line">        class_addMethod([_TFI_ForwradingClass <span class="keyword">class</span>], aSelector, (IMP)_tfi_unrecognized_default_imp_, <span class="string">"@@:"</span>);</span><br><span class="line">        [anInvocation invokeWithTarget:[[_TFI_ForwradingClass alloc] init]];</span><br><span class="line">        [counter decreaseCountForObject:<span class="built_in">NSStringFromSelector</span>(aSelector)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark -  Getter &amp; Setter</span></span><br><span class="line">- (<span class="keyword">void</span>)TFI_setUnrecognizedSelectorCacheSet:(CPThreadSafeCounter *)set &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(TFI_unrecognizedSelectorCacheSet), set, OBJC_ASSOCIATION_RETAIN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)TFI_unrecognizedSelectorCacheSet &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h3><p>若子类重写了methodSignatureForSelector:就不启用保护了。实现中利用_TFI_ForwradingClass类提供未识别selector的NSMethodSignature同时也作为anInvocation的target。<br>利用CPThreadSafeCounter在TFI_methodSignatureForSelector:方法中标记开启了保护的selector。在TFI_forwardInvocation:方法中，动态为_TFI_ForwradingClass添加未识别selector的默认实现，使其可以响应。</p>
<h3 id="测试结果-2"><a href="#测试结果-2" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="/images/AnExperimentOnPreventingUnrecognizedSelectorCrash/testResult3.png" alt=""><br>返回值为CGRect时同样会出现BAD_ACCESS，原因和实现1中描述的是一样的。</p>
<h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>利用forwardInvocation:动态提供IMP实现的方案优缺点如下：<br><strong>优点</strong>：<br>1、respondsToSelector:不会触发消息转发流程，不干扰respondsToSelector:测试结果。<br><strong>缺点</strong>：<br>1、不能保护声明了返回值为CGRect但是没有提供的方法。<br>2、效率低于forwardingTargetForSelector:的实现。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>实现1(利用resolveInstanceMethod:动态提供方法的IMP)干扰当了respondsToSelector:不适合使用。实现2(利用forwardingTargetForSelector:提供转发对象)和实现3(利用forwardInvocation:转发消息)都可以使用，实现2比实现3更高效。</p>
<h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><ol>
<li>无法保护返回为CGRect的方法，且会将Unrecognized Selector Crash转移成BAD_ACCESS崩溃，需要添加额外信息，以避免使问题更难定位。</li>
<li>无法保护重些动态方法决议/消息转发方法的类。</li>
<li>返回的默认数据nil，若后续业务流程不做妥善处理，可能引发别的问题。</li>
</ol>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008048-CH1-SW1" target="_blank" rel="noopener">ObjCRuntimeGuide</a><br><a href="http://www.sealiesoftware.com/blog/archive/2008/10/30/objc_explain_objc_msgSend_stret.html" target="_blank" rel="noopener">objc explain: objc_msgSend_stret</a><br><a href="http://www.clarkcox.com/blog/2009/02/04/inspecting-obj-c-parameters-in-gdb/" target="_blank" rel="noopener">Inspecting Obj-C parameters in gdb</a><br><a href="https://www.classes.cs.uchicago.edu/archive/2009/spring/22620-1/docs/handout-03.pdf" target="_blank" rel="noopener">x86-64 Instructions and ABI</a><br><a href="http://dev.qq.com/topic/5901b0e2f997cdab7e29cf4c" target="_blank" rel="noopener">小萝莉说Crash系列</a><br><a href="https://neyoufan.github.io/2017/01/13/ios/BayMax_HTSafetyGuard/#unrecognized%20selector" target="_blank" rel="noopener">大白健康系统</a></p>
]]></content>
      
        <categories>
            
            <category> 探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Unrecognized Selector Crash </tag>
            
            <tag> 崩溃预防 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次+initialize:函数线程安全问题导致的崩溃]]></title>
      <url>/2017/12/11/DebugInitializeSignal11Crash/</url>
      <content type="html"><![CDATA[<h1 id="崩溃信息"><a href="#崩溃信息" class="headerlink" title="崩溃信息"></a>崩溃信息</h1><p>崩溃线程：任意线程<br>崩溃栈：Application received signal 11</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 libobjc.A.dylib  0x1800bc148  _objc_msgSend + 8</span><br><span class="line">2 CoreFoundation   0x181642cf8  ___rehashd + 144</span><br><span class="line">3 CoreFoundation   0x18152a434  -[__NSDictionaryM setObject:forKey:] + 676</span><br><span class="line">4 MyApp            0x10027ba04  +[BaseDataModel initialize] (BaseDataModel.m:31)</span><br><span class="line">5 libobjc.A.dylib  0x1800a9418  _CALLING_SOME_+initialize_METHOD + 24</span><br><span class="line">6 libobjc.A.dylib  0x1800a9684  __class_initialize + 612</span><br><span class="line">7 libobjc.A.dylib  0x1800b14b4  _lookUpImpOrForward + 228</span><br><span class="line">8 libobjc.A.dylib  0x1800bc478  __objc_msgSend_uncached + 56</span><br><span class="line">9 MyApp            0x1001bbf64  -[HeartRateManager loadNewestdayHeartRateWithUserId:deviceId:] (HeartRateManager.m:1413)</span><br></pre></td></tr></table></figure>
<p>用户使用轨迹：<br><img src="/images/DebugInitializeSignal11Crash/track.png" alt=""><br>系统分布：<br><img src="/images/DebugInitializeSignal11Crash/os.png" alt=""></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>看使用轨迹是用户刚打开App，BaseDataModel在+initialize:函数中做某些初始化操作时发生了崩溃。看看崩溃函数相关的源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">static NSMutableDictionary* gClassRemovedPropertiesMapDict = nil;</span><br><span class="line">@implementation BaseDataModel</span><br><span class="line">+(void)initialize</span><br><span class="line">&#123;</span><br><span class="line">    //记录当前所有的Properties,没有映射的就remove掉</span><br><span class="line">    if (gClassRemovedPropertiesMapDict == nil)</span><br><span class="line">    &#123;</span><br><span class="line">        gClassRemovedPropertiesMapDict = [NSMutableDictionary dictionary];</span><br><span class="line">    &#125;</span><br><span class="line">    LKModelInfos* info = [[self class] getModelInfos];</span><br><span class="line">    NSMutableArray* pptArray = [NSMutableArray array];</span><br><span class="line">    for (int i = 0; i &lt; info.count; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        LKDBProperty* ppt = [info objectWithIndex:i];</span><br><span class="line">        NSString* pptName = ppt.propertyName;</span><br><span class="line">        [pptArray addObject:pptName];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 崩溃的函数</span><br><span class="line">    [gClassRemovedPropertiesMapDict setObject:pptArray forKey:NSStringFromClass([self class])];</span><br><span class="line">    </span><br><span class="line">    [self mapRelation];</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>崩溃栈顶的函数为<strong>_objc_msgSend</strong>，出现在可变字典设置键值对时:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[gClassRemovedPropertiesMapDict setObject:pptArray forKey:NSStringFromClass([self class])];</span><br></pre></td></tr></table></figure>
<p>由于<strong>NSMutableDictionary</strong>为非线程安全，在多个线程同时访问时会出现问题。但是印象中，+initialize:应该是线程安全的，当ClassA在ThreadA上被触发+initialize:时，其他线程向此类的发起的消息都会被阻塞。+initialize:的注释如下：</p>
<blockquote>
<p>Initializes the class before it receives its first message.<br>The runtime sends initialize to each class in a program just before the class, or any class that inherits from it, is sent its first message from within the program. Superclasses receive this message before their subclasses.    </p>
<p>The runtime sends the initialize message to classes in a thread-safe manner. That is, initialize is run by the first thread to send a message to a class, and any other thread that tries to send a message to that class will block until initialize completes.  </p>
</blockquote>
<p>如上面所说，当ClassA在ThreadA上被触发+initialize:时，其他线程线程向此类的发起的消息都会被阻塞。</p>
<blockquote>
<p>The superclass implementation may be called multiple times if subclasses do not implement initialize—the runtime will call the inherited implementation—or if subclasses explicitly call [super initialize]. If you want to protect yourself from being run multiple times, you can structure your implementation along these lines:      </p>
</blockquote>
<p>但是上面一段又补充道：当子类没有实现+initialize:方法时，父类的+initialize:方法就会被调用。这点倒是符合BaseDataModel的+initialize:被调用的场景。继承于BaseDataModel的DataModel，都没有实现+initialize:方法，均依赖于父类BaseDataModel的+initialize:方法来做初始化。那在这中场景下，共享了父类中的+initialize:实现的两个子类，当在两个线程同时调起时，其+initialize:调用逻辑是串行安全的？还是并行执行的？<br><a id="more"></a></p>
<h2 id="重现和实验"><a href="#重现和实验" class="headerlink" title="重现和实验"></a>重现和实验</h2><p>重现的逻辑可以直接模仿BaseDataModel的使用逻辑，声明TestObect类来担当BaseDataModel的角色。利用objc可以在运行时添加子类的特性，每次添加子类的代码抛到并行队列中，并循环1000次提高重现概率。在+initialize:函数中，开始和结束的位置分别打上start和end标记，并在终端中输出。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">static NSMutableDictionary *gMapDict = nil;</span><br><span class="line"></span><br><span class="line">@interface TestObect : NSObject</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation TestObect</span><br><span class="line">+ (void)initialize &#123;</span><br><span class="line">    </span><br><span class="line">    // 打印开始，记录线程</span><br><span class="line">    NSLog(@&quot;start from thread %@&quot;, [NSThread currentThread]);</span><br><span class="line">    </span><br><span class="line">    if (gMapDict == nil) &#123;</span><br><span class="line">        gMapDict = [[NSMutableDictionary alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    NSString *className = NSStringFromClass(self);</span><br><span class="line">    NSString *dumyInfo = [className copy];</span><br><span class="line">    [gMapDict setObject:dumyInfo forKey:className];</span><br><span class="line">    </span><br><span class="line">    // 打印结束，记录线程</span><br><span class="line">    NSLog(@&quot;end from thread %@&quot;, [NSThread currentThread]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)aMethond &#123;</span><br><span class="line">    return @&quot;aMessage&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface AppDelegate ()</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation AppDelegate</span><br><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    // Override point for customization after application launch.</span><br><span class="line">    </span><br><span class="line">    for (NSInteger i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</span><br><span class="line">            // 动态创建TestObect子类并创建一个实例</span><br><span class="line">            NSString *className = [NSString stringWithFormat:@&quot;TestObectSubclass_%@&quot;, @(i)];</span><br><span class="line">            Class c = objc_allocateClassPair([TestObect class], className.UTF8String, 0);</span><br><span class="line">            objc_registerClassPair(c);</span><br><span class="line">            </span><br><span class="line">            //向TestObect子类实例发送消息，触发initialize:函数</span><br><span class="line">            id anInstance = [[c alloc] init];</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2017-12-11 15:49:08.392546+0800 TestProject[7871:3491896] start from thread &lt;NSThread: 0x1d006a100&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.392598+0800 TestProject[7871:3491896] end from thread &lt;NSThread: 0x1d006a100&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393337+0800 TestProject[7871:3491896] start from thread &lt;NSThread: 0x1d006a100&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393402+0800 TestProject[7871:3491894] start from thread &lt;NSThread: 0x1d0070d80&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393559+0800 TestProject[7871:3491895] start from thread &lt;NSThread: 0x1d4677200&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393614+0800 TestProject[7871:3491897] start from thread &lt;NSThread: 0x1cc06a180&gt;&#123;number = 6, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393761+0800 TestProject[7871:3491894] end from thread &lt;NSThread: 0x1d0070d80&gt;&#123;number = 4, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393759+0800 TestProject[7871:3491896] end from thread &lt;NSThread: 0x1d006a100&gt;&#123;number = 3, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393811+0800 TestProject[7871:3491902] start from thread &lt;NSThread: 0x1d46771c0&gt;&#123;number = 7, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393970+0800 TestProject[7871:3491895] end from thread &lt;NSThread: 0x1d4677200&gt;&#123;number = 5, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.393993+0800 TestProject[7871:3491903] start from thread &lt;NSThread: 0x1cc06a0c0&gt;&#123;number = 9, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.394019+0800 TestProject[7871:3491903] end from thread &lt;NSThread: 0x1cc06a0c0&gt;&#123;number = 9, name = (null)&#125;</span><br><span class="line">2017-12-11 15:49:08.394045+0800 TestProject[7871:3491902] end from thread</span><br></pre></td></tr></table></figure>
<p>出现了崩溃：<br><img src="/images/DebugInitializeSignal11Crash/crash.png" alt=""><br>输出结果为：多个start,end混杂在一起，而不是start-&gt;end，start-&gt;end，start-&gt;end，start-&gt;end的串行输出，说明<strong>共享了父类中的+initialize:实现的多个子类，当在两个线程同时调起时，其+initialize:调用逻辑是并行执行的。</strong></p>
<h2 id="initialize-的线程安全特性"><a href="#initialize-的线程安全特性" class="headerlink" title="+initialize:的线程安全特性"></a>+initialize:的线程安全特性</h2><p>任意一个类的+initialize:方法只会在触发线程中调用，其他向此类发起的消息均会被阻塞。同一父类的不同子类的+initialize:是可以并行执行的，无论这些子类是继承了父类的实现还是重写了。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>将NSMutableDictionary替换为线程的安全的类来缓存信息即可。由于BaseDataModel的+initialize:中的缓存逻辑不会触发其他BaseDataModel的子类的初始化，所以不存在死锁的情况。</p>
]]></content>
      
        <categories>
            
            <category> 踩坑记录 </category>
            
            <category> 崩溃定位及预防 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> 崩溃分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次UIWebView signal 11崩溃定位]]></title>
      <url>/2017/12/11/DebugWebViewSignal11Crash2/</url>
      <content type="html"><![CDATA[<h1 id="崩溃信息"><a href="#崩溃信息" class="headerlink" title="崩溃信息"></a>崩溃信息</h1><p>线程：WebThread<br>崩溃栈：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1  libGPUSupportMercury.dylib  0x190e66f90  &lt;redacted&gt;</span><br><span class="line">2  AGXGLDriver                 0x19587e1bc  _gldUpdateDispatch</span><br><span class="line">3  libGPUSupportMercury.dylib  0x190e67f40  _gpusSubmitDataBuffers</span><br><span class="line">4  AGXGLDriver                 0x19587f77c  _gldUpdateDispatch</span><br><span class="line">5  GLEngine                    0x1960c3a80  _gliBindViewES</span><br><span class="line">6  OpenGLES                    0x183c8eb20  -[EAGLContext renderbufferStorage:fromDrawable:] + 504</span><br><span class="line">7  WebCore                     0x1865de15c  WebCore::GraphicsContext3D::~GraphicsContext3D() + 116</span><br><span class="line">8  WebCore                     0x186fb895c  WebCore::WebGLRenderingContextBase::destroyGraphicsContext3D() + 148</span><br><span class="line">9  WebCore                     0x186fb82ac  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase() + 744</span><br><span class="line">10 WebCore                     0x186fb5c0c  WebCore::WebGLRenderingContext::~WebGLRenderingContext() + 12</span><br><span class="line">11 WebCore                     0x18660e8e4  WebCore::HTMLCanvasElement::~HTMLCanvasElement() + 200</span><br><span class="line">12 WebCore                     0x18660ea98  WebCore::HTMLCanvasElement::~HTMLCanvasElement() + 12</span><br></pre></td></tr></table></figure>
<p>用户使用轨迹：<br><img src="/images/DebugWebViewSignal11Crash2/track.png" alt=""><br>系统分布：<br><img src="/images/DebugWebViewSignal11Crash2/os.png" alt=""><br>webview加载的链接：<br><a href="https://h5.youzan.com/v2/common/prefetching" target="_blank" rel="noopener">https://h5.youzan.com/v2/common/prefetching</a><br><a id="more"></a></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>综合上面的信息，用户是在浏览与<strong><a href="https://h5.youzan.com/v2/common/prefetching" target="_blank" rel="noopener">https://h5.youzan.com/v2/common/prefetching</a></strong>相关的网页，进入后台一段时间后就发生崩溃。根据官方的Technical Note <a href="https://developer.apple.com/library/content/qa/qa1766/_index.html" target="_blank" rel="noopener">How to fix OpenGL ES application crashes when moving to the background</a>，类比下崩溃栈，可以确定下来是webview在后台调用OPenGL ES进行渲染所致。在重现中也发现，除了加载<strong><a href="https://h5.youzan.com/v2/common/prefetching" target="_blank" rel="noopener">https://h5.youzan.com/v2/common/prefetching</a></strong>时进入后台可能会崩溃，加载<a href="https://threejs.org/examples/#webgl_animation_cloth" target="_blank" rel="noopener">含WebGL动画的网页</a>时进入后台也容易出现崩溃。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>监听WillResignActive通知，强制加载一个空白界面，在WillEnterForground时再重新加载原来的链接。但是会导致重新加载界面，用户体验不佳。后面尝试切换至WKWebView，加载上述两个链接时进入后台均不会出发崩溃。所以最终放弃了UIWebView转向了WKWebView。</p>
]]></content>
      
        <categories>
            
            <category> 踩坑记录 </category>
            
            <category> 崩溃定位及预防 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> 崩溃分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次UIWebView _WTFCrash崩溃定位]]></title>
      <url>/2017/12/08/DebugWebViewSignal11Crash/</url>
      <content type="html"><![CDATA[<h1 id="WTFCrash-崩溃信息"><a href="#WTFCrash-崩溃信息" class="headerlink" title="_WTFCrash 崩溃信息"></a>_WTFCrash 崩溃信息</h1><p>线程：WebThread<br>崩溃栈：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">JavaScriptCore    0x1835449e4    _WTFCrash + 72</span><br><span class="line">JavaScriptCore    0x1835449dc    _WTFCrash + 64</span><br><span class="line">JavaScriptCore    0x183445864    JSC::JSLock::DropAllLocks::DropAllLocks(JSC::VM*) + 0</span><br><span class="line">WebCore           0x18f6ffc44    SendDelegateMessage(NSInvocation*)</span><br><span class="line">CoreFoundation    0x181cb6230    ____forwarding___ + 440</span><br><span class="line">CoreFoundation    0x181bbab6c    ___forwarding_prep_0___ + 92</span><br><span class="line">WebKitLegacy      0x1905a717c    -[_WebSafeForwarder forwardInvocation:]</span><br><span class="line">WebCore           0x1900c9440    &lt;redacted&gt;</span><br><span class="line">WebCore           0x18f70a348    &lt;redacted&gt;</span><br><span class="line">WebCore           0x18f73ee68    &lt;redacted&gt;</span><br><span class="line">WebCore           0x18f73ecf4    __ZN7WebCore11FrameLoader4loadERKNS_16FrameLoadRequestE</span><br><span class="line">WebKitLegacy      0x190578c00    &lt;redacted&gt;</span><br><span class="line">WebCore           0x1903ae23c    &lt;redacted&gt;</span><br><span class="line">CoreFoundation    0x181c6a9ec    ___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24</span><br><span class="line">CoreFoundation    0x181c69c90    ___CFRunLoopDoSources0 + 264</span><br><span class="line">CoreFoundation    0x181c67d40    ___CFRunLoopRun + 712</span><br><span class="line">CoreFoundation    0x181b950a4    _CFRunLoopRunSpecific + 396</span><br><span class="line">WebCore           0x18f6e4858    &lt;redacted&gt;</span><br><span class="line">libsystem_pthread.dylib    0x192c2fe80    &lt;redacted&gt;</span><br><span class="line">libsystem_pthread.dylib    0x192c2fddc    &lt;redacted&gt;</span><br><span class="line">libsystem_pthread.dylib    0x192c2cfb0    _thread_start</span><br></pre></td></tr></table></figure>
<p>用户使用轨迹：任意WUIWebView实例，用户浏览内链内容时容易出现。<br>系统版本：集中在iOS 8上。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>根据<a href="https://bugs.webkit.org/show_bug.cgi?id=139654" target="_blank" rel="noopener">Bug 139654: DropAllLocks RELEASE_ASSERT on iOS</a>的bug分析，这应该是UIWebView在iOS 8上的bug。<br><a id="more"></a></p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>既然这是iOS 8系统的Bug，且我们AppiOS 10/9的系统版本用户占比较大，可以直接忽略此崩溃。</p>
<h1 id="无心插柳柳成荫"><a href="#无心插柳柳成荫" class="headerlink" title="无心插柳柳成荫"></a>无心插柳柳成荫</h1><p>在含有这个崩溃的版本里，H5与App的通信，是App通过UIWebView的私有属性获取到了UIWebView实例的JSContext，在context上设置全局bridge对象来实现的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSContext *context = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</span><br></pre></td></tr></table></figure>
<p>随着iOS审核对私有API使用变的严格，同时私有API也有可能在后续的系统版本中发生变化，所以决定在新版中使用拦截含特定scheme的url实现H5于App间的通信。然后在这个新版本中iOS 8上就没有出现过_WTFCrash了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SendDelegateMessage(NSInvocation*)</span><br><span class="line">CoreFoundation    0x181cb6230    ____forwarding___ + 440</span><br><span class="line">CoreFoundation    0x181bbab6c    ___forwarding_prep_0___ + 92</span><br><span class="line">WebKitLegacy      0x1905a717c    -[_WebSafeForwarder forwardInvocation:]</span><br></pre></td></tr></table></figure>
<p>结合上面的崩溃栈，可能这和js-&gt;javascriptCore-&gt;JSContext-&gt;OC_ExportObject消息传递过程中的锁管理有一定的关系。</p>
]]></content>
      
        <categories>
            
            <category> 踩坑记录 </category>
            
            <category> 崩溃定位及预防 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> 崩溃分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记一次Signal 5崩溃定位（NotDone）]]></title>
      <url>/2017/12/08/DebugSignal5Crash/</url>
      <content type="html"><![CDATA[<h1 id="崩溃栈"><a href="#崩溃栈" class="headerlink" title="崩溃栈"></a>崩溃栈</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">* 1  libdispatch.dylib   0x180506bb0   __dispatch_queue_resume + 624</span><br><span class="line">* 2  CoreFoundation      0x18160e22c   ___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20</span><br><span class="line">* 3  CoreFoundation      0x18160e22c   ___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20</span><br><span class="line">* 4  CoreFoundation      0x18160d930   __CFXRegistrationPost + 400</span><br><span class="line">* 5  CoreFoundation      0x18160d6ac   ____CFXNotificationPost_block_invoke + 60</span><br><span class="line">* 6  CoreFoundation      0x18167cb9c   -[_CFXNotificationRegistrar find:object:observer:enumerator:] + 1504</span><br><span class="line">* 7  CoreFoundation      0x18154fbf4   __CFXNotificationPost + 376</span><br><span class="line">* 8  Foundation          0x1820566bc   -[NSNotificationCenter postNotificationName:object:userInfo:] + 68</span><br><span class="line">* 9  UIKit               0x18771d9d8   -[UIApplication _sendWillEnterForegroundCallbacks] + 232</span><br><span class="line">* 10 UIKit               0x187758ebc   -[UIApplication _handleApplicationActivationWithScene:transitionContext:completion:] + 2140</span><br><span class="line">* 11 UIKit               0x1877583ec   -[UIApplication _handleApplicationLifecycleEventWithScene:transitionContext:completion:] + 452</span><br><span class="line">* 12 UIKit               0x187743ae8   ___70-[UIApplication scene:didUpdateWithDiff:transitionContext:completion:]_block_invoke + 152</span><br><span class="line">* 13 UIKit               0x18774376c   -[UIApplication scene:didUpdateWithDiff:transitionContext:completion:] + 888</span><br><span class="line">* 14 UIKit               0x187a75034   -[UIApplicationSceneClientAgent scene:handleEvent:withCompletion:] + 464</span><br><span class="line">* 15 FrontBoardServices  0x1831e7bd4   &lt;redacted&gt;</span><br><span class="line">* 16 FrontBoardServices  0x183215904   &lt;redacted&gt;</span><br><span class="line">* 17 FrontBoardServices  0x183215770   &lt;redacted&gt;</span><br><span class="line">* 18 FrontBoardServices  0x183215b18   &lt;redacted&gt;</span><br><span class="line">* 19 CoreFoundation      0x181622278   ___CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 24</span><br><span class="line">* 20 CoreFoundation      0x181621bc0   ___CFRunLoopDoSources0 + 524</span><br><span class="line">* 21 CoreFoundation      0x18161f7c0   ___CFRunLoopRun + 804</span><br><span class="line">* 22 CoreFoundation      0x18154e048   _CFRunLoopRunSpecific + 444</span><br><span class="line">* 23 GraphicsServices    0x182fd1198   _GSEventRunModal + 180</span><br><span class="line">* 24 UIKit               0x187527818   -[UIApplication _run] + 684</span><br><span class="line">* 25 UIKit               0x187522550   _UIApplicationMain + 208</span><br><span class="line">* 26 App                 0x1005d3268   _main (main.m:16)</span><br><span class="line">* 27 libdyld.dylib       0x1805305b8   _start + 4</span><br></pre></td></tr></table></figure>
<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>先确定下signal 5崩溃的原因是啥，signal.h定义的signal如下：<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#define	SIGHUP	1	/* hangup */</span><br><span class="line">#define	SIGINT	2	/* interrupt */</span><br><span class="line">#define	SIGQUIT	3	/* quit */</span><br><span class="line">#define	SIGILL	4	/* illegal instruction (not reset when caught) */</span><br><span class="line">#define	SIGTRAP	5	/* trace trap (not reset when caught) */</span><br><span class="line">#define	SIGABRT	6	/* abort() */</span><br><span class="line">#if  (defined(_POSIX_C_SOURCE) &amp;&amp; !defined(_DARWIN_C_SOURCE))</span><br><span class="line">#define	SIGPOLL	7	/* pollable event ([XSR] generated, not supported) */</span><br><span class="line">#else	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */</span><br><span class="line">#define	SIGIOT	SIGABRT	/* compatibility */</span><br><span class="line">#define	SIGEMT	7	/* EMT instruction */</span><br><span class="line">#endif	/* (!_POSIX_C_SOURCE || _DARWIN_C_SOURCE) */</span><br><span class="line">#define	SIGFPE	8	/* floating point exception */</span><br><span class="line">#define	SIGKILL	9	/* kill (cannot be caught or ignored) */</span><br><span class="line">#define	SIGBUS	10	/* bus error */</span><br><span class="line">#define	SIGSEGV	11	/* segmentation violation */</span><br><span class="line">#define	SIGSYS	12	/* bad argument to system call */</span><br><span class="line">#define	SIGPIPE	13	/* write on a pipe with no one to read it */</span><br><span class="line">#define	SIGALRM	14	/* alarm clock */</span><br><span class="line">#define	SIGTERM	15	/* software termination signal from kill */</span><br><span class="line">#define	SIGURG	16	/* urgent condition on IO channel */</span><br><span class="line">#define	SIGSTOP	17	/* sendable stop signal not from tty */</span><br><span class="line">#define	SIGTSTP	18	/* stop signal from tty */</span><br><span class="line">#define	SIGCONT	19	/* continue a stopped process */</span><br><span class="line">#define	SIGCHLD	20	/* to parent on child stop or exit */</span><br><span class="line">#define	SIGTTIN	21	/* to readers pgrp upon background tty read */</span><br><span class="line">#define	SIGTTOU	22	/* like TTIN for output if (tp-&gt;t_local&amp;LTOSTOP) */</span><br><span class="line">#if  (!defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE))</span><br><span class="line">#define	SIGIO	23	/* input/output possible signal */</span><br><span class="line">#endif</span><br><span class="line">#define	SIGXCPU	24	/* exceeded CPU time limit */</span><br><span class="line">#define	SIGXFSZ	25	/* exceeded file size limit */</span><br><span class="line">#define	SIGVTALRM 26	/* virtual time alarm */</span><br><span class="line">#define	SIGPROF	27	/* profiling time alarm */</span><br><span class="line">#if  (!defined(_POSIX_C_SOURCE) || defined(_DARWIN_C_SOURCE))</span><br><span class="line">#define SIGWINCH 28	/* window size changes */</span><br><span class="line">#define SIGINFO	29	/* information request */</span><br><span class="line">#endif</span><br><span class="line">#define SIGUSR1 30	/* user defined signal 1 */</span><br><span class="line">#define SIGUSR2 31	/* user defined signal 2 */</span><br></pre></td></tr></table></figure>
<p><strong>SIGTRAP    5 -&gt; trace trap (not reset when caught)</strong><br><a href="https://developer.apple.com/library/content/technotes/tn2151/_index.html" target="_blank" rel="noopener">根据苹果的文档</a>：</p>
<blockquote>
<p>Similar to an Abnormal Exit, this exception is intended to give an attached debugger the chance to interrupt the process at a specific point in its execution. You can trigger this exception from your own code using the __builtin_trap() function. If no debugger is attached, the process is terminated and a crash report is generated.</p>
<p>Lower-level libraries (e.g, libdispatch) will trap the process upon encountering a fatal error. Additional information about the error can be found in the Additional Diagnostic Information section of the crash report, or in the device’s console.</p>
</blockquote>
<p> 这种错误也是属于异常错误，不过常用于连接调试器进行调试。某系底层库在遇到严重错误时也会抛出这个错误，例如<strong>libdispatch</strong>。回看这个崩溃的运行栈，位于最顶端的是<strong>__dispatch_queue_resume</strong>，也是属于<strong>libdispatch</strong>这个库，应该是某个地方使用GCD出错。</p>
<h1 id="分析定位"><a href="#分析定位" class="headerlink" title="分析定位"></a>分析定位</h1><p>崩溃的最后一个函数是<strong>__dispatch_queue_resume</strong>，可能和<strong>dispatch_resume</strong>函数有一定的关系，项目中使用地方的印象中应该不多。全局搜索一把，有以下结果：<br><img src="/images/DebugSignal5Crash/searchResult.png" alt=""><br>en…….用的地方还是挺多的，那到底是哪一个函数呢？回看崩溃栈：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 7  CoreFoundation      0x18154fbf4   __CFXNotificationPost + 376</span><br><span class="line">* 8  Foundation          0x1820566bc   -[NSNotificationCenter postNotificationName:object:userInfo:] + 68</span><br><span class="line">* 9  UIKit               0x18771d9d8   -[UIApplication _sendWillEnterForegroundCallbacks] + 232</span><br><span class="line">* 10 UIKit               0x187758ebc   -[UIApplication _handleApplicationActivationWithScene:transitionContext:completion:] + 2140</span><br><span class="line">* 11 UIKit               0x1877583ec   -[UIApplication _handleApplicationLifecycleEventWithScene:transitionContext:completion:] + 452</span><br><span class="line">* 12 UIKit               0x187743ae8   ___70-[UIApplication scene:didUpdateWithDiff:transitionContext:completion:]_block_invoke + 152</span><br></pre></td></tr></table></figure>
<p>这几个函数指明此时App刚进入前台，正在广播ApplicationWillEnterForeground通知，看刚才的搜索结果，可以确认出问题的代码应该在<strong>[LEColorPicker appDidEnterForeground:]</strong>方法上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)appDidEnterForeground:(NSNotification *)notification &#123;</span><br><span class="line">	dispatch_resume(taskQueue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="dispatch-resume"><a href="#dispatch-resume" class="headerlink" title="dispatch_resume"></a>dispatch_resume</h2><p>看看此函数注释确认下是参数出错还是用法出发，注释如下：<br><img src="/images/DebugSignal5Crash/dispatch_resume.png" alt=""><br>留意圈注的地方，如果dispatch_object已经激活再次调用resume此函数会抛出异常，结束进程。若传入参数为nil，行为不定。结合代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">dispatch_resume(taskQueue);</span><br><span class="line"></span><br><span class="line">- (id)init &#123;</span><br><span class="line">    self = [super init];</span><br><span class="line">    if (self) &#123;</span><br><span class="line">        // Create queue and set working flag initial state</span><br><span class="line">        taskQueue = dispatch_queue_create(&quot;LEColorPickerQueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">        dispatch_set_target_queue(taskQueue, dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0));</span><br><span class="line">        _isActive = [UIApplication sharedApplication].applicationState == UIApplicationStateActive;</span><br><span class="line">        </span><br><span class="line">        // Add notifications for multitasking and background aware</span><br><span class="line">        [self addNotificationObservers];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)addNotificationObservers &#123;</span><br><span class="line">    // Add observers for notification to respond at app state changes.</span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class="line">                                             selector:@selector(appDidEnterBackground:)</span><br><span class="line">                                                 name:UIApplicationDidEnterBackgroundNotification</span><br><span class="line">                                               object:nil];</span><br><span class="line">    </span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</span><br><span class="line">                                             selector:@selector(applicationWillResignActive:)</span><br><span class="line">                                                 name:UIApplicationWillResignActiveNotification</span><br><span class="line">                                               object:nil];</span><br><span class="line">    </span><br><span class="line">    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(appDidEnterForeground:)</span><br><span class="line">                                                 name:UIApplicationWillEnterForegroundNotification</span><br><span class="line">                                               object:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)appDidEnterForeground:(NSNotification *)notification &#123;</span><br><span class="line">	dispatch_resume(taskQueue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>taskQueue成员变量在实例初始化时就被赋值且没有地方再设置为nil。难道是<strong>appDidEnterForeground:</strong>回调了两次，导致<strong>dispatch_resume(taskQueue);</strong>被调用了两次？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 2  CoreFoundation      0x18160e22c   ___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20</span><br><span class="line">* 3  CoreFoundation      0x18160e22c   ___CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ + 20</span><br></pre></td></tr></table></figure>
<p>崩溃栈的两个连续函数调用证明了<strong>appDidEnterForeground:</strong>回调了两次。</p>
<h2 id="真相？？"><a href="#真相？？" class="headerlink" title="真相？？"></a>真相？？</h2><p>如果是<strong>addNotificationObservers</strong>被调用了两次，<strong>applicationWillResignActive:</strong>和<strong>appDidEnterForeground:</strong>都会被调用两次，<strong>dispatch_suspend</strong>和<strong>dispatch_resume</strong>的调用次数应该是匹配的，不会出现<strong>dispatch_resume</strong>次数大于<strong>dispatch_suspend</strong>的情况。难道是NSNotifictaion的Bug？<br><img src="/images/DebugSignal5Crash/CoreFoundationSource.png" alt=""><br>搜索了CoreFoundation的源码也没有发现__CFXRegistrationPost相关的类。<br>en…………</p>
<h1 id="临时的解决方法…"><a href="#临时的解决方法…" class="headerlink" title="临时的解决方法….."></a>临时的解决方法…..</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (void)applicationWillResignActive:(NSNotification *)notification &#123;</span><br><span class="line">    dispatch_suspend(taskQueue);</span><br><span class="line">    _taskQueueSuspended = YES;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)appDidEnterForeground:(NSNotification *)notification &#123;</span><br><span class="line">    if (_taskQueueSuspended) &#123;</span><br><span class="line">        dispatch_resume(taskQueue);</span><br><span class="line">        _taskQueueSuspended = NO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打个标记，仅在标记开启时才调用<strong>dispatch_resume</strong>😂。</p>
<h1 id="几个版本之后的结果"><a href="#几个版本之后的结果" class="headerlink" title="几个版本之后的结果"></a>几个版本之后的结果</h1><p>此崩溃没有再出现过，但是根本原因还是没能找到……</p>
]]></content>
      
        <categories>
            
            <category> 踩坑记录 </category>
            
            <category> 崩溃定位及预防 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> 崩溃分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS崩溃crash收集及分析]]></title>
      <url>/2017/12/06/iOSCrashAnalyze/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>崩溃的出现意味着代码出现了问题，通常的解决路径是根据测试/用户/日志文件的行为描述，试图重现崩溃，定位到具体的代码位置，分析出现的原因，找到根治的办法，最后验证解决方案以确认崩溃被修复。那么我们该如何去搜集、分析、解决崩溃呢，请看下文。<br><a id="more"></a></p>
<h1 id="如何收集崩溃信息？"><a href="#如何收集崩溃信息？" class="headerlink" title="如何收集崩溃信息？"></a>如何收集崩溃信息？</h1><h2 id="官方渠道XCode-Organizer"><a href="#官方渠道XCode-Organizer" class="headerlink" title="官方渠道XCode Organizer"></a>官方渠道XCode Organizer</h2><p>在Xcode-&gt;Window-&gt;Organizer选择已上架的App看以查看到每个版本中App的崩溃情况，如下图：<br><img src="/images/iOSCrashAnalyze/ItunesConnectShot.png" alt=""><br>优点：  </p>
<ol>
<li>自动符号化崩溃栈，甚至可以直接打开项目，跳转到相关文件代码</li>
</ol>
<p>缺点：  </p>
<ol>
<li>只有崩溃数量及不同机型/系统下的占比，没有崩溃率。</li>
<li>只有崩溃栈信息，没有当时用户的操作记录，对于像上图中的崩溃，仅有崩溃栈信息，很难下手处理。</li>
</ol>
<h2 id="第三方服务：听云-Bugly-友盟"><a href="#第三方服务：听云-Bugly-友盟" class="headerlink" title="第三方服务：听云/Bugly/友盟"></a>第三方服务：听云/Bugly/友盟</h2><h3 id="听云"><a href="#听云" class="headerlink" title="听云"></a>听云</h3><p>听云收集的崩溃信息如下：<br><img src="/images/iOSCrashAnalyze/tingyun1.png" alt=""><br><img src="/images/iOSCrashAnalyze/tingyun2.png" alt=""><br>听云记录的信息比较全面，包含崩溃率统计、崩溃栈、崩溃轨迹。</p>
<h3 id="Bugly"><a href="#Bugly" class="headerlink" title="Bugly"></a>Bugly</h3><p>Bugly收集的信息如下：<br><img src="/images/iOSCrashAnalyze/bugly1.png" alt=""><br><img src="/images/iOSCrashAnalyze/bugly2.png" alt=""><br>Bugly收集到的信息包含崩溃率统计、崩溃栈，可以关联崩溃时的记录的日志。在日志中记录VC的打开记录，实现类似于听云的崩溃轨迹记录。</p>
<h3 id="友盟"><a href="#友盟" class="headerlink" title="友盟"></a>友盟</h3><p>友盟收集的信息如下：<br><img src="/images/iOSCrashAnalyze/umeng.png" alt=""><br>友盟收集到的信息包含崩溃率统计、崩溃栈。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>优点：  </p>
<ol>
<li>除了崩溃时的运行栈外，还可以附带当时用户的使用轨迹！这非常有利于我们重建当时的崩溃场景！（友盟除外）</li>
</ol>
<p>缺点：  </p>
<ol>
<li>需要自行上传DSYM文件。</li>
<li>对App有一定的入侵，可以抓取到App行为信息。</li>
</ol>
<h2 id="DIY自行构建"><a href="#DIY自行构建" class="headerlink" title="DIY自行构建"></a>DIY自行构建</h2><p>使用如<a href="https://github.com/kstenerud/KSCrash" target="_blank" rel="noopener">KSCrash</a>或干脆自己写一个崩溃监测库，实现类似于上述第三方服务的功能。优点当然是可以实现任意想要的功能，但是开发成本比较大。</p>
<h1 id="如何符号化崩溃信息？"><a href="#如何符号化崩溃信息？" class="headerlink" title="如何符号化崩溃信息？"></a>如何符号化崩溃信息？</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0   CoreFoundation                      0x0000000183491d1c &lt;redacted&gt; + 148</span><br><span class="line">1   libobjc.A.dylib                     0x00000001826e0528 objc_exception_throw + 56</span><br><span class="line">2   CoreFoundation                      0x0000000183491c4c &lt;redacted&gt; + 0</span><br><span class="line">3   YouAppsBinary                       0x100817c80 YouAppsBinary + 8486016</span><br><span class="line">4   libsystem_platform.dylib            0x00000001830b7b34 _sigtramp + 36</span><br><span class="line">5   MediaToolbox                        0x0000000187982300 FigPhotoJPEGShouldUseHardwareDecode + 76</span><br><span class="line">6   ImageIO                             0x00000001853e87ec &lt;redacted&gt; + 188</span><br><span class="line">7   ImageIO                             0x00000001853e9180 &lt;redacted&gt; + 312</span><br><span class="line">8   ImageIO                             0x00000001855447b0 &lt;redacted&gt; + 80</span><br><span class="line">9   ImageIO                             0x0000000185542d8c &lt;redacted&gt; + 108</span><br><span class="line">10  ImageIO                             0x00000001853cac88 &lt;redacted&gt; + 312</span><br><span class="line">11  ImageIO                             0x00000001853c8554 &lt;redacted&gt; + 428</span><br></pre></td></tr></table></figure>
<p>在没有符号化崩溃信息之前，我们只能看到包含镜像名+函数内存地址的崩溃栈，没法得知具体的崩溃函数及行号，这时就需要使用DSYM文件对崩溃信息进行符号化。</p>
<h2 id="DSYM文件"><a href="#DSYM文件" class="headerlink" title="DSYM文件"></a>DSYM文件</h2><p>XCode编译项目之后，会在yourApp.app同步目录下生成一个yourApp.app.dsym的bundle，里面包含了16进制函数地址映射到源文件函数行号的中转文件。有了这个文件，就可以将内存地址转换为崩溃发生时的源文件及行号。每个版本的app/dsym都有唯一匹配的UUID，只有当两者UUID唯一匹配时，16进制符号化出来的信息才是正确的。app/dysm的UUID可以使用以下命令查看。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dwarfdump --uuid /xx/xx.app</span><br><span class="line">dwarfdump --uuid /xx/xx.app.dsym</span><br></pre></td></tr></table></figure>
<h2 id="如何符号化"><a href="#如何符号化" class="headerlink" title="如何符号化"></a>如何符号化</h2><p>xcode的organizer的可以自动符号化它所及收集到的崩溃信息。将匹配的dsym文件上传到听云/Bugly，也可以得到符号化的崩溃信息。若想自己查看也可以通过以下命令查看:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun atos -arch arm64 -o /xxxx/xxx.app.dsym 函数地址</span><br></pre></td></tr></table></figure>
<h1 id="如何分析崩溃信息？"><a href="#如何分析崩溃信息？" class="headerlink" title="如何分析崩溃信息？"></a>如何分析崩溃信息？</h1><p>这里有一篇不错的<a href="http://www.cocoachina.com/industry/20130725/6677.html" target="_blank" rel="noopener">崩溃分析文章</a>，可以详细参考下。</p>
<h1 id="常见的崩溃原因及解决方案"><a href="#常见的崩溃原因及解决方案" class="headerlink" title="常见的崩溃原因及解决方案"></a>常见的崩溃原因及解决方案</h1><h2 id="集合类插入nil-越界访问"><a href="#集合类插入nil-越界访问" class="headerlink" title="集合类插入nil/越界访问"></a>集合类插入nil/越界访问</h2><p>这些类型崩溃崩溃栈都有很明显的特征，栈顶附近通常带有<strong><em>_objc_exception_throw</em></strong>调用，为App没有处理相关异常，App最终崩溃。像听云/Bugly等第三发服务，会将异常信息打印出来，方便定位。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、[NSPlaceholderString initWithFormat:locale:arguments:]: nil argument     </span><br><span class="line">2、setObjectForKey: object cannot be nil</span><br></pre></td></tr></table></figure>
<p><strong>解决办法</strong>：  </p>
<ol>
<li>追踪异常数据的来源，从源头上堵住异常数据。避免一处加了保护，导致脏数据流向别的流程，出发其他异常。  </li>
<li>给所有集合类加上nil/越界访问保护，例如定义一些<a href="https://github.com/shaojiankui/JKCategories" target="_blank" rel="noopener">Category</a>或<a href="https://neyoufan.github.io/2017/01/13/ios/BayMax_HTSafetyGuard/" target="_blank" rel="noopener">替换一些不安全的方法</a>。但要加上合适的断言/上报机制，尽快发现和处理这种异常情况。</li>
</ol>
<h2 id="unrecognized-selector"><a href="#unrecognized-selector" class="headerlink" title="unrecognized selector"></a>unrecognized selector</h2><p><strong>出现这种崩溃的原因通常为：</strong>  </p>
<ol>
<li>调用了高版本系统API  </li>
<li>业务处理逻辑未考虑到某些异常情况，强转类型出错。这种问题很容易出现在含复杂状态管理的业务里</li>
</ol>
<p><strong>解决办法</strong>：  </p>
<ol>
<li>对于第一种情况，在使用不熟悉的API时，要留意一下可用的系统版本。此外在使用高系统版本的API时，XCode 9会出现警告，多留意一下即可。   </li>
<li>取决于细不细心啰。   </li>
<li>或者<a href="http://dev.qq.com/topic/5901b0e2f997cdab7e29cf4c" target="_blank" rel="noopener">利用objc的消息转发机制，动态添加未知的selector的实现</a>。但是这种方法有缺陷，在未知selector的转发流程中，我们拿到的只有selector，没有方法实现，<strong>因此我们不知道此selctor的返回值类型是什么</strong>。假设我们默认返回nil，若此selector原本返回的是对象，则有可能不崩溃。若此selector原本返回的是block/结构体，就会导致别的崩溃。</li>
</ol>
<h2 id="Application-received-signal-11-SIGSEGV"><a href="#Application-received-signal-11-SIGSEGV" class="headerlink" title="Application received signal 11/SIGSEGV"></a>Application received signal 11/SIGSEGV</h2><p>出现了非法内存访问，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Application received signal 11</span><br><span class="line"></span><br><span class="line">	1. libobjc.A.dylib 0x1800b9b88 _objc_msgSend + 8</span><br><span class="line">	2. CoreFoundation  0x180a3f1b8 ___rehashd + 152</span><br><span class="line">	3. CoreFoundation  0x180928468 -[__NSDictionaryM setObject:forKey:] + 688</span><br><span class="line">	4. app.            0x10027ba04 [BaseDataModel initialize] (BaseDataModel.m:31)</span><br></pre></td></tr></table></figure>
<p><strong>出现这种崩溃的原因通常为：</strong>  </p>
<ol>
<li>使用了assign作为修饰符，在对象释放之后，仍然进行访问。  </li>
<li>不同线程同时操作可变集合类/赋值同一个成员变量。</li>
</ol>
<p><strong>解决办法</strong>：  </p>
<ol>
<li>在合适的时候置为nil或改为用weak修饰。<strong>某些系统API，如CBCentralManager的delegate属性在iOS 11上声明为weak，然而在旧版本上缺声明为assign，所以遇到系统给的delegate，在dealloc时，最好设置为nil。</strong><br><img src="/images/iOSCrashAnalyze/weakassign.png" alt=""></li>
<li>涉及线程管理，后续再做讨论。</li>
</ol>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://developer.apple.com/library/content/technotes/tn2151/_index.html" target="_blank" rel="noopener">Understanding and Analyzing Application Crash Reports</a></li>
<li><a href="http://www.qidiandasheng.com/2016/04/10/crash-xuebeng/" target="_blank" rel="noopener">iOS崩溃crash大解析</a>  </li>
<li><a href="http://dev.qq.com/topic/59141e56ca95d00d727ba750" target="_blank" rel="noopener">如何定位Obj-C野指针随机Crash系列</a>   </li>
<li><a href="http://dev.qq.com/topic/5901ae25520bfb7e51ff52c2" target="_blank" rel="noopener">小萝莉说Crash系列</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 崩溃定位及预防 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 崩溃分析 </tag>
            
            <tag> 崩溃定位 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
